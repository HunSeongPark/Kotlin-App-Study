package com.hunseong.fcmnotification

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService : FirebaseMessagingService() {

    // Ïï± Ï†úÍ±∞ ÌõÑ Ïû¨ÏÑ§Ïπò Îì± TokenÏù¥ ÏÉàÎ°ú Î∞úÍ∏âÎêòÏóàÏùÑ Îïå ÎèôÏûë
    // ÏÑúÎ≤Ñ Îã®ÏóêÏÑú ÏÉàÎ°ú Token Í∞íÏùÑ Ï†ÄÏû•ÌïòÎäî Îì±Ïùò ÎèôÏûë ÏàòÌñâ Ìï† Ïàò ÏûàÏùå
    override fun onNewToken(token: String) {
        super.onNewToken(token)
    }

    // FCMÏóêÏÑú Î©îÏÑ∏ÏßÄ ÏàòÏã† Ïãú ÎèôÏûë
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        // Notification Channel ÏÉùÏÑ±
        createNotificationChannel()

        // RemoteMessageÏóêÏÑú Í∞í Ï∂îÏ∂ú
        val type = remoteMessage.data["type"]?.let {
            NotificationType.valueOf(it)
        } ?: return
        val title = remoteMessage.data["title"]
        val message = remoteMessage.data["message"]


        // ÏïåÎ¶º ÏÉùÏÑ±
        NotificationManagerCompat.from(this)
            .notify(type.id, createNotification(type, title, message))
    }

    private fun createNotificationChannel() {

        // Oreo Ïù¥ÏÉÅ Î≤ÑÏ†ÑÏóê ÎåÄÌï¥ Notification Channel ÏÉùÏÑ±
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT)
            channel.description = CHANNEL_DESCRIPTION

            val notificationManager =
                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun createNotification(
        type: NotificationType,
        title: String?,
        message: String?,
    ): Notification {

        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("notificationType", "${type.title} ÌÉÄÏûÖ")

            // Ï§ëÎ≥µÎêú ActivityÍ∞Ä TopÏóê ÏúÑÏπòÌï† Ïãú Í∏∞Ï°¥ Top Ï†úÍ±∞ ÌõÑ ÏÉàÎ°úÏö¥ Activity ÏÉùÏÑ±
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }

        // Notification Manager Ï∏°ÏóêÍ≤å Intent ÏúÑÏûÑÌïòÍ∏∞ ÏúÑÌïú PendingIntent
        // FLAG_UPDATE_CURRENT : Í∞ôÏùÄ IDÎ•º Í∞ÄÏßÑ ÏïåÎ¶ºÏóê ÎåÄÌï¥ÏÑúÎäî Update ÏàòÌñâ
        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, FLAG_UPDATE_CURRENT)

        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_baseline_check_circle_outline_24)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true) // ÏïåÎ¶º ÌÅ¥Î¶≠ Ïãú ÏïåÎ¶º ÏÇ≠Ï†ú

        when (type) {
            NotificationType.NORMAL -> Unit
            NotificationType.EXPANDABLE -> {
                // ÌôïÏû•Ìòï ÏïåÎ¶º (Ïû•Î¨∏ ÌÖçÏä§Ìä∏ ÌòïÌÉú)
                notificationBuilder.setStyle(NotificationCompat.BigTextStyle()
                    .bigText("üí∞üéÑ\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0" +
                            "\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D" +
                            "\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84" +
                            "\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84\uD83D\uDCB0\uD83C\uDF84"))
            }
            NotificationType.CUSTOM -> Unit
        }
        return notificationBuilder.build()
    }

    companion object {
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }
}